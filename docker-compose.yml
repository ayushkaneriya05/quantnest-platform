
services:
  redis:
    image: "redis:alpine"
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped

  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery_worker
    command: celery -A backend worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_started
    restart: always

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery_beat
    command: celery -A backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
    depends_on:
      backend:
        condition: service_started
      redis:
        condition: service_started
    restart: always

volumes:
  redis_data:
